<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__ethernet_controller_firefly_8h_source" xml:lang="en-US">
<title>EthernetControllerFirefly.h</title>
<indexterm><primary>EthernetControllerFirefly.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
2 
3 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__network_client_8h">NetworkClient.h</link>&quot;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;Added&#32;by&#32;ClassView</emphasis>
4 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__ethernet_controller_firefly_8h">EthernetControllerFirefly.h</link>&quot;</emphasis>
5 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
6 
7 
8 
9 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
10 
11 <emphasis role="keyword">typedef</emphasis>&#32;function&lt;bool(<emphasis role="keywordtype">void</emphasis>)&gt;&#32;tBoolFunction;
12 
13 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_device_sequencer">CDeviceSequencer</link>;
14 
15 <emphasis role="keyword">class&#32;</emphasis>CEthernetControllerFirefly&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_c_network_client">CNetworkClient</link>
16 {
17 <emphasis role="keyword">public</emphasis>:
18 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;SequencerCommandListSize;
19 &#32;&#32;&#32;&#32;uint32_t*&#32;SequencerCommandList;
20 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;MyMultiIO;
21 <emphasis role="keyword">public</emphasis>:
22 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Connected;
23 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;DebugBufferOn;
24 &#32;&#32;&#32;&#32;ofstream*&#32;DebugBufferFile;
25 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ExternalTrigger0;
26 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ExternalTrigger1;
27 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;PeriodicTriggerPeriod_in_s;
28 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;PeriodicTriggerAllowedWait_in_s;
29 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ExternalClock0;
30 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ExternalClock1;
31 &#32;&#32;&#32;&#32;<emphasis role="comment">//double&#32;BusFrequency;</emphasis>
32 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;FPGAClockToBusClockRatio;
33 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;FPGAClockFrequencyInHz;
34 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;FPGAUseExternalClock;
35 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;FPGAUseStrobeGenerator;
36 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;StartTickCounts;
37 &#32;&#32;&#32;&#32;<emphasis role="comment">//uint32_t*&#32;FPGABuffer;</emphasis>
38 &#32;&#32;&#32;&#32;<emphasis role="comment">//uint32_t*&#32;FPGAAbsoluteTime;</emphasis>
39 &#32;&#32;&#32;&#32;<emphasis role="comment">//uint32_t&#32;FPGABufferUsed;</emphasis>
40 &#32;&#32;&#32;&#32;<emphasis role="comment">//COutput*&#32;myOutput;</emphasis>
41 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;LastPeriodicTriggerPeriod_in_s;
42 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;DebugModeOn;
43 <emphasis role="keyword">private</emphasis>:
44 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;core_option_LED;&#32;
45 &#32;&#32;&#32;&#32;uint8_t&#32;core_option_SPI_CS;
46 &#32;&#32;&#32;&#32;uint8_t&#32;core_option_dig_out;&#32;&#32;
47 &#32;&#32;&#32;&#32;uint8_t&#32;core_option_PL_to_PS;
48 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SetPeriodicTriggerAtBeginningOfNextSequence;
49 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WaitForPeriodicTriggerAtBeginningOfSequence;
50 &#32;&#32;&#32;&#32;uint32_t*&#32;previous_command_buffer;
51 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;previous_command_buffer_length;
52 &#32;&#32;&#32;&#32;CDeviceSequencer*&#32;MySequencer;
53 &#32;&#32;&#32;&#32;uint8_t*&#32;previous_command_buffer_ptr;
54 &#32;&#32;&#32;&#32;std::string&#32;DebugFilename;
55 <emphasis role="keyword">public</emphasis>:
56 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;StartXADCAnalogInAcquisition(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;channel_nr,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;number_of_datapoints,&#32;<emphasis role="keywordtype">double</emphasis>&#32;delay_between_datapoints_in_ms);
57 <emphasis role="keyword">private</emphasis>:
58 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;StartSPIAnalogInAcquisition(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;channel_nr,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;number_of_datapoints,&#32;<emphasis role="keywordtype">double</emphasis>&#32;delay_between_datapoints_in_ms);
59 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddCommandAnalogInOut(uint8_t&#32;adc_register_address,&#32;uint8_t&#32;adc_write_enable,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__int16&#32;adc_programming_out,&#32;uint8_t&#32;dont_execute_now,&#32;uint8_t&#32;only_read_write,&#32;uint32_t&#32;wait_time);
60 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddCommandSetCoreOption_LED(<emphasis role="keywordtype">bool</emphasis>&#32;a_core_option_LED);
61 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddCommandSetCoreOption_SPI_CS(uint8_t&#32;a_core_option_SPI_CS);
62 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddCommandSetCoreOption_dig_out(uint8_t&#32;a_core_option_dig_out);
63 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddCommandSetCoreOption_PL_to_PS(uint8_t&#32;a_core_option_PL_to_PS);
64 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddCommandSetCoreOptions();
65 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddCommandWait(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;Wait_in_FPGA_clock_cycles);
66 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddCommandSetPLToPSCommand(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;PLToPSCommand);
67 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;DoTransmitOnlyDifferenceBetweenCommandSequenceIfPossible;
68 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AttemptNetworkCommand(tBoolFunction&#32;fCommand);
69 <emphasis role="keyword">public</emphasis>:&#32;
70 &#32;&#32;&#32;&#32;CEthernetControllerFirefly(CDeviceSequencer*&#32;_MySequencer);
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~CEthernetControllerFirefly();
72 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SendSequenceToFPGA(uint32_t*&#32;buffer);
73 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddSequencerCommandToSequenceList(uint32_t&#32;high_buffer,&#32;uint32_t&#32;low_buffer);
74 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;StartAnalogInAcquisition(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;channel_nr,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;number_of_datapooints,&#32;<emphasis role="keywordtype">double</emphasis>&#32;delay_between_datapoints);
75 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;WriteReadSPI(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;chip_select,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;number_of_bits_out,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__int64&#32;data_high,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__int64&#32;data_low,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;number_of_bits_in);
76 &#32;&#32;&#32;&#32;<emphasis role="comment">//bool&#32;AddData(uint32_t*&#32;BusData,&#32;uint32_t*&#32;Spacing,&#32;/*uint32_t*&#32;AbsoluteTime,*/&#32;unsigned&#32;long&#32;Count);</emphasis>
77 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AddSequencePreamble();
78 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;GetAktWaveformPoint(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;DataPointsWritten,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&amp;running);
79 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;GetNextCycleNumber(<emphasis role="keywordtype">long</emphasis>&amp;&#32;NextCycleNumber);
80 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ResetCycleNumber();
81 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CheckReady(<emphasis role="keywordtype">double</emphasis>&#32;timeout_in_s&#32;=&#32;1);
82 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Reset();
83 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__control_a_p_i_8cpp_1ae11c2f457429ac307cee5322e091eb7c">WaitTillEndOfSequenceThenGetInputData</link>(uint8_t*&amp;&#32;buffer,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;buffer_length,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;EndTimeOfCycle,&#32;<emphasis role="keywordtype">double</emphasis>&#32;timeout_in_s&#32;=&#32;10);
84 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddProgramLineToSequenceList(uint8_t&#32;command,&#32;uint32_t&#32;data,&#32;uint32_t&#32;delay);
85 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddProgramLine(&#32;uint8_t&#32;command,&#32;uint32_t&#32;data,&#32;uint32_t&#32;delay);
86 &#32;&#32;&#32;&#32;<emphasis role="comment">//void&#32;AddCommandStep(uint32_t&#32;data,&#32;uint32_t&#32;delay);</emphasis>
87 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetStrobeOptions(&#32;uint8_t&#32;strobe_choice,&#32;uint8_t&#32;strobe_low_length,&#32;uint8_t&#32;strobe_high_length);
88 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetTriggerOptions(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ExternalTrigger0,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ExternalTrigger1);
89 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddExternalTrigger(&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ExternalTrigger0,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ExternalTrigger1,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;FPGASoftwareTrigger&#32;);
90 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;WriteBufferToFile(uint32_t*&#32;buffer,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;length);
91 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_network_client_1ad966282c40b32a48a700e2ae1bd15842">ConnectSocket</link>(LPCTSTR&#32;lpszAddress,&#32;UINT&#32;port,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;aFPGAClockToBusClockRatio,&#32;<emphasis role="keywordtype">double</emphasis>&#32;aFPGAClockFrequencyInHz,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;aFPGAUseExternalClock,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;aFPGAUseStrobeGenerator,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ExternalTrigger);
92 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;GetBusFrequency();
93 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WaitTillFinished();
94 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Start();
95 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Stop();
96 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CloseConnection();
97 &#32;&#32;&#32;&#32;<emphasis role="comment">//void&#32;ResetProgramBuffer()&#32;{&#32;FPGABufferUsed&#32;=&#32;0;&#32;}</emphasis>
98 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__control_a_p_i_8cpp_1adebc9e720e4b0afda1c4b980fbc11459">SetFrequency</link>(<emphasis role="keywordtype">double</emphasis>&#32;Frequency);
99 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;GetFrequency(<emphasis role="keywordtype">double</emphasis>&amp;&#32;Frequency);
100 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;GetPeriodicTriggerError(<emphasis role="keywordtype">bool</emphasis>&amp;&#32;Error);
101 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetExternalTrigger(<emphasis role="keywordtype">bool</emphasis>&#32;aExternalTrigger0,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;aExternalTrigger1);
102 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetPeriodicTrigger(<emphasis role="keywordtype">double</emphasis>&#32;aPeriodicTriggerPeriod_in_s,&#32;<emphasis role="keywordtype">double</emphasis>&#32;aPeriodicTriggerAllowedWaitTime_in_s);
103 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;WaitForPeriodicTrigger(<emphasis role="keywordtype">bool</emphasis>&#32;aWaitForPeriodicTriggerAtBeginningOfSequence);
104 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SetExternalClock(<emphasis role="keywordtype">bool</emphasis>&#32;ExternalClock0,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ExternalClock1);
105 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;DebugBuffer(CString&#32;filename);
106 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddSequencerCommandToBuffer(uint32_t*&#32;buffer,&#32;uint32_t&#32;n,&#32;uint32_t&#32;high_buffer,&#32;uint32_t&#32;low_buffer);
107 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ClearSequencerCommandList();
108 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddSequencerCommand(uint32_t&#32;high_word,&#32;uint32_t&#32;low_word);
109 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__control_a_p_i_8cpp_1a3186ff65e19d503d7e7d346f3179f08e">SwitchDebugMode</link>(<emphasis role="keywordtype">bool</emphasis>&#32;OnOff,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;aFilename);
110 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SwitchDebugLED(<emphasis role="keywordtype">bool</emphasis>&#32;OnOff);
111 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;IgnoreTCPIP(<emphasis role="keywordtype">bool</emphasis>&#32;OnOff);
112 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddMarker(uint8_t&#32;Marker);
113 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddCommandWriteSystemTimeToInputMemory();
114 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddCommandWriteInputBuffer(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;input_buf_mem_data,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;write_next_address&#32;=&#32;1,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;input_buf_mem_address&#32;=&#32;0);
115 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;TransmitOnlyDifferenceBetweenCommandSequenceIfPossible(<emphasis role="keywordtype">bool</emphasis>&#32;OnOff);
116 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;MeasureEthernetBandwidth(uint32_t&#32;DataSize&#32;=&#32;1024&#32;*&#32;1024,&#32;<emphasis role="keywordtype">double</emphasis>&#32;MinimumExpected&#32;=&#32;-1);
117 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;OptimizedCommand(CString&#32;CommandString);
118 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AttemptGetAktWaveformPoint(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;DataPointsWritten,&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;running);
119 
120 <emphasis role="keyword">private</emphasis>:
121 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ModifySequence(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;differences,&#32;uint32_t&#32;difference_index_table[],&#32;uint32_t&#32;difference_command_table[]);
122 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AttemptModifySequence(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;differences,&#32;uint32_t&#32;difference_index_table[],&#32;uint32_t&#32;difference_command_table[]);
123 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SendSequence(uint32_t&#32;DataSize,&#32;uint32_t*&#32;buffer);
124 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AttemptSendSequence(uint32_t&#32;DataSize,&#32;uint32_t*&#32;buffer);
125 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AttemptGetNextCycleNumber(<emphasis role="keywordtype">long</emphasis>&amp;&#32;NextCycleNumber);
126 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AttemptSetFrequency(<emphasis role="keywordtype">double</emphasis>&#32;Frequency);
127 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AttemptGetFrequency(<emphasis role="keywordtype">double</emphasis>&amp;&#32;Frequency);
128 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AttemptGetPeriodicTriggerError(<emphasis role="keywordtype">bool</emphasis>&amp;&#32;Error);
129 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AttemptWaitTillEndOfSequenceThenGetInputData(uint8_t*&amp;&#32;buffer,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;buffer_length,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;&#32;<emphasis role="keywordtype">long</emphasis>&amp;&#32;EndTimeOfCycle,&#32;<emphasis role="keywordtype">double</emphasis>&#32;timeout_in_s);
130 };
</programlisting></section>
