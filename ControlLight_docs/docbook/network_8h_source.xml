<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_network_8h_source" xml:lang="en-US">
<title>network.h</title>
<indexterm><primary>network.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 
2 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
3 
4 <emphasis role="preprocessor">#ifdef&#32;_WINSOCKAPI_</emphasis>
5 <emphasis role="preprocessor">#undef&#32;_WINSOCKAPI_&#32;</emphasis><emphasis role="comment">//&#32;Prevent&#32;inclusion&#32;of&#32;Winsock.h</emphasis>
6 <emphasis role="preprocessor">#endif</emphasis>
7 <emphasis role="preprocessor">#include&#32;&lt;WinSock2.h&gt;</emphasis>&#32;&#32;&#32;<emphasis role="comment">//&#32;Include&#32;Winsock2.h&#32;before&#32;other&#32;headers</emphasis>
8 <emphasis role="preprocessor">#include&#32;&lt;ws2tcpip.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;Optional:&#32;Include&#32;for&#32;additional&#32;Winsock&#32;functions&#32;like&#32;getaddrinfo</emphasis>
9 
10 <emphasis role="comment">//&#32;Ensure&#32;that&#32;the&#32;Winsock&#32;library&#32;is&#32;linked</emphasis>
11 <emphasis role="comment">//#pragma&#32;comment(lib,&#32;&quot;Ws2_32.lib&quot;)</emphasis>
12 
13 <emphasis role="preprocessor">#include&#32;&lt;Windows.h&gt;</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ensure&#32;Windows.h&#32;is&#32;included&#32;after&#32;Winsock2.h</emphasis>
14 
15 <emphasis role="preprocessor">#include&#32;&lt;afxsock.h&gt;</emphasis>
16 
17 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
18 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
19 
20 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_network_8h_1a1c5f76c615ef7fd0ba9e365b63e48e85">Sleep_ms</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;ms);
21 
22 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_network_1ae4c6f98dd9b44e1547f7eff0a0799dfc">CNetwork</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;CObject
23 {
24 <emphasis role="comment">//&#32;Attributes</emphasis>
25 <emphasis role="keyword">public</emphasis>:
26 &#32;&#32;&#32;&#32;CSocket*&#32;<link linkend="_class_c_network_1a9ff8816febaa3cdd8f3bc2089e5e4547">m_pSocket</link>;
27 &#32;&#32;&#32;&#32;LPCTSTR&#32;<link linkend="_class_c_network_1a5f969438f02bc6b805285c3ea03fb431">m_lpszAddress</link>;
28 &#32;&#32;&#32;&#32;UINT&#32;<link linkend="_class_c_network_1adf887dc6ef221b9efc2c8292fa4329ab">m_nPort</link>;&#32;
29 &#32;&#32;&#32;&#32;CString&#32;<link linkend="_class_c_network_1aa0527dfb26d50e0720a808800e1b274e">m_SocketName</link>;
30 <emphasis role="comment">//&#32;Operations</emphasis>
31 <emphasis role="keyword">public</emphasis>:
32 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_network_1a771eb75b32d2a86f321bd94d15be52a1">ConnectSocket</link>(LPCTSTR&#32;lpszAddress,&#32;UINT&#32;nPort,CString&#32;SocketName);
33 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_network_1aca17f1229fc5e167fdaad9fff933d70f">ResetConnection</link>();
34 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_c_network_1aa8f487a58a1d73e21e0af9601f9bfcc4">SendMsg</link>(CString&amp;&#32;strText);
35 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_network_1a6487dc24383af3cc9adc7aa94199b971">SendData</link>(<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;Data,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;Size);
36 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_network_1ad9636a38079916ec660c88092f84ad36">SendString</link>(<emphasis role="keyword">const</emphasis>&#32;CString&amp;&#32;str);&#32;&#32;<emphasis role="comment">//&#32;Helper&#32;for&#32;text-based&#32;protocols</emphasis>
37 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_network_1a19cf86a9324374a37d710e3a34e72da9">ReceiveMsg</link>(<emphasis role="keywordtype">char</emphasis>&#32;end_character&#32;=&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WaitForStartCharacter&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keywordtype">char</emphasis>&#32;start_character&#32;=&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>,&#32;<emphasis role="keywordtype">double</emphasis>&#32;timeout_in_seconds&#32;=&#32;5);
38 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_network_1a1ebf567f42570a93f29079c14d244e91">ReceiveData</link>(uint8_t*&#32;buffer,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;buffer_length,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;timeout&#32;=&#32;5000);
39 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_network_1a52997f0e0a9fcd43ada48a1b3673f9c3">ReceiveString</link>(CString&amp;&#32;outStr,&#32;<emphasis role="keywordtype">double</emphasis>&#32;timeout_in_seconds&#32;=&#32;5,&#32;<emphasis role="keywordtype">char</emphasis>&#32;endChar&#32;=&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
40 <emphasis role="comment">//&#32;Implementation</emphasis>
41 <emphasis role="keyword">public</emphasis>:
42 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_c_network_1a55be2d3a1d45549c8199b1a4324996d6">DebugStop</link>();
43 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_c_network_1a0a279fda933f240e269f9e6410dd2be8">DebugStart</link>(CString&#32;Filename);
44 &#32;&#32;&#32;&#32;ofstream&#32;*<link linkend="_class_c_network_1a187987b13ede6e699546871811d354cd">DebugFile</link>;
45 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_c_network_1abdd54634e4dcfb17515ed74dd3e0b64c">Flush</link>();
46 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_c_network_1a340cf9706d3627825719d63583959d4d">StoreLastMessage</link>(CString&#32;Message);
47 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_network_1a63cd36d8c60d6a8e5cc962fead4ab36c">GetMessage</link>(CString&#32;&amp;Message,&#32;<emphasis role="keywordtype">double</emphasis>&#32;timeout_in_seconds&#32;=&#32;5,&#32;<emphasis role="keywordtype">int</emphasis>&#32;mode&#32;=&#32;1);
48 &#32;&#32;&#32;&#32;CString&#32;<link linkend="_class_c_network_1a8db02b78a8f17f1ec7ccdb6ff5a15f7f">LastMessage</link>;
49 &#32;&#32;&#32;&#32;<link linkend="_class_c_network_1ae4c6f98dd9b44e1547f7eff0a0799dfc">CNetwork</link>();
50 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class_c_network_1a5f8c44eababcef02f4ce7af3592dba37">~CNetwork</link>();
51 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_c_network_1ae05676ec152f6b4a5880e51d837ddb80">DisconnectSocket</link>();
52 <emphasis role="keyword">private</emphasis>:
53 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WaitForRead(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;timeout_ms);
54 
55 <emphasis role="keyword">public</emphasis>:
56 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;New&#32;reconnect/retry&#32;helpers:</emphasis>
57 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_network_1ad6e6c1704cdd7e80e5521e83d6a02362">IsConnected</link>()&#32;<emphasis role="keyword">const</emphasis>;
58 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_network_1ae0f27ccfb10951f735c0049191c16f1e">Reconnect</link>(<emphasis role="keywordtype">int</emphasis>&#32;maxRetries&#32;=&#32;3,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;delay_ms&#32;=&#32;1000);
59 &#32;&#32;&#32;&#32;<emphasis role="comment">//bool&#32;SendDataWithRetry(const&#32;uint8_t*&#32;data,&#32;unsigned&#32;long&#32;size,&#32;int&#32;maxRetries&#32;=&#32;3,&#32;unsigned&#32;long&#32;delay_ms&#32;=&#32;1000);</emphasis>
60 &#32;&#32;&#32;&#32;<emphasis role="comment">//bool&#32;ReceiveDataWithRetry(uint8_t*&#32;buffer,&#32;unsigned&#32;long&#32;size,&#32;unsigned&#32;long&#32;timeout_ms&#32;=&#32;5000,&#32;int&#32;maxRetries&#32;=&#32;3,&#32;unsigned&#32;long&#32;delay_ms&#32;=&#32;1000);</emphasis>
61 
62 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(Optional)&#32;Track&#32;connection&#32;status</emphasis>
63 <emphasis role="keyword">private</emphasis>:
64 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_lastOpFailed&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;<emphasis role="comment">//&#32;for&#32;auto-reconnect,&#32;if&#32;desired</emphasis>
65 };
</programlisting></section>
