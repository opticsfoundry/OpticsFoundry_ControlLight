<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__control_a_p_i_8h" xml:lang="en-US">
<title>ControlAPI.h File Reference</title>
<indexterm><primary>ControlAPI.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;afxwin.h&gt;<?linebreak?>#include &lt;fstream&gt;<?linebreak?>#include &lt;cstdint&gt;<?linebreak?></programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__control_a_p_i_8h_1a72cc69751765d28544d94e2a93da4412">_AFXDLL</link></para>
</listitem>
            <listitem><para>#define <link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link></para>
</listitem>
            <listitem><para>#define <link linkend="__control_a_p_i_8h_1a1c3cf2d9d1101f8bf1e704b2bae1455a">API_EXPORT_CLASS</link></para>
</listitem>
            <listitem><para>#define <link linkend="__control_a_p_i_8h_1a1c3cf2d9d1101f8bf1e704b2bae1455a">API_EXPORT_CLASS</link></para>
</listitem>
            <listitem><para>#define <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link>&#160;&#160;&#160;bool</para>
</listitem>
            <listitem><para>#define <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link>(name)</para>
</listitem>
            <listitem><para>#define <link linkend="__control_a_p_i_8h_1ae89d33bd59c5669016e4694ae249bd0c">CLA_FNDEF</link>(name)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1ab4216036d280f0e2357f4895feae00b3">AddErrorMessage</link> (const std::string &amp;error_message)</para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a8c0341f25801b401f242fef403355076">Create</link> (bool InitializeAfx, bool InitializeAfxSocket)</para>

<para>Initializes the ControlAPI. If you use a bare function C API, then this function must be called before using any other functions in the API. If you didn&apos;t load MFC yet (which is the case if you use Qt), then set. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> void <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a506a69f4a65cdc24f90c45593af69e14">Cleanup</link> ()</para>

<para>This function must be called when you are finished using the API. The class wrapped version of this API calls this function in its destructor. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> bool <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a140351e5a8172134e8eff160d1b558e3">DidErrorOccur</link> ()</para>

<para>Check if an error has occurred since the last call to GetLastError. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> const char *<link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a0844f20c11e7006267c9d1f324aa0972">GetLastError</link> ()</para>

<para>returns the last error messages </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> void <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a6d7a0dc42a60c601ca861bda69a816e6">Configure</link> (bool _DisplayErrors)</para>

<para>Configures if the ControlAPI should display error messages. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1ab07d444b997590d8bb7cbd82dd2036b9">LoadFromJSONFile</link> (const char *filename)</para>

<para>Loads a configuration from a JSON file. Before you can use the control system, you either must read a json configuration file, or define the devices in the API. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a60e38637677508109aefb6af4780f92c">Initialize</link> ()</para>

<para>After Configuring the hardware, e.g. by loading a json configuration file, this function must be called to initialize the hardware. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> void <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a7ea429f67ff65d764dfe65e89db76f76">SwitchDebugMode</link> (bool OnOff, const char *FileName)</para>

<para>Switches Debug mode on. In Debug mode, the sequence of each FPGA sequencer is written to a human readable ASCII file before being sent to the FPGA. In addition, the FPGA sequencers display more information on their USB-UART port, being slowed down a bit by that. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1aa882c8edaa867e2f92e6626956eb9569">IsReady</link> ()</para>

<para>Checks if the ControlAPI is ready to be used. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> void <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a5b051278563acf5ea4fa65465679b785">StartAssemblingSequence</link> ()</para>

<para>Starts assembling a sequence. Clears any previous sequence. Must be called before adding commands to the sequence. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1af357426cac3b146e775198deb3e7879f">SetRegister</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, const unsigned int &amp;SubAddress, const uint8_t *Data, const unsigned long &amp;DataLength_in_bit, const uint8_t &amp;StartBit=0)</para>

<para>This function sets a register for a device on the sequencer. What this means depends on the device type. This function gives us an easy way to add new functionality to a device without having to programm new DLL functions. SetRegister maps to the register map given in the device&apos;s datasheet. Note: this is not currently implemented in the API. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a262189e7099cc79d968f8ea9c66524e8">SetValue</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, const unsigned int &amp;SubAddress, const uint8_t *Data, const unsigned long &amp;DataLength_in_bit, const uint8_t &amp;StartBit=0)</para>

<para>This function sets a value for a device on the sequencer. What this means depends on the device type. This function gives us an easy way to add new functionality to a device without having to programm new DLL functions. In contrast to SetRegister, SetValue can execute more complex operations, such as calculating a DDS frequency tuning word from the given frequency and then programming that. There can be several SetValue functions for the same SetRegister function. There can be SetValue functions that set some parameter, or that trigger some action, not even necessarily related to the registers of the device. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1abf975f1bca00f331a47c6c49154b3349">SetValueSerialDevice</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, const unsigned int &amp;SubAddress, const uint8_t *Data, const unsigned long &amp;DataLength_in_bit, const uint8_t &amp;StartBit=0)</para>

<para>As SetValue, but for serial devices. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1adaa14ea09a4c22a39531fc3fa21de7f7">SetRegisterSerialDevice</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, const unsigned int &amp;SubAddress, const uint8_t *Data, const unsigned long &amp;DataLength_in_bit, const uint8_t &amp;StartBit=0)</para>

<para>As SetRegister, but for serial devices. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a525a56e7c7e0b7db2190a537777d75b9">Wait_ms</link> (double time_in_ms)</para>

<para>Wait for a given time in ms. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a11d0b9d417e50889b6a266ef4747a523">GetTime_ms</link> (double &amp;time_in_ms)</para>

<para>Get the current time in the currently assembled sequence ms. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1ae89d33bd59c5669016e4694ae249bd0c">CLA_FNDEF</link> <link linkend="__control_a_p_i_8h_1a21be816bc7405b76d68549abf1837ebd">GetTimeOfSequencer_ms</link> (const unsigned int &amp;Sequencer, double &amp;time_in_ms)</para>

<para>Get the current time of a specific sequencer in the currently assembled sequence ms. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1ae89d33bd59c5669016e4694ae249bd0c">CLA_FNDEF</link> <link linkend="__control_a_p_i_8h_1a659cc537a03ff9e172efbfee6b8f29fe">GetTimeDebtOfSequencer_ms</link> (const unsigned int &amp;Sequencer, double &amp;time_debt_in_ms)</para>

<para>Get the time debtof a specific sequencer in the currently assembled sequence ms. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1afb0d59c570ca8cc10b8a6e6b0f36afb7">SetVoltage</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, double Voltage)</para>

<para>Sets the voltage of an analog output device. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a972d0eaa0ae7789d098a1aa41b6c0f3e">SetDigitalOutput</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, uint8_t BitNr, bool OnOff)</para>

<para>Sets a digital output to high or low. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a704875336c6dfc8d3c1b1dc85f821461">SetStartFrequency</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, double Frequency)</para>

<para>Sets the start frequency of a DDS (for now a AD9854 DDS). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a05b2d6a3d280298732b5e46c4ab34449">SetStopFrequency</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, double Frequency)</para>

<para>Sets the stop frequency of a DDS (for now a AD9854 DDS). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a4a0a9d4c9b90bf999f291dccc7e97f6a">SetModulationFrequency</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, double Frequency)</para>

<para>Sets the modulation frequency of a DDS (for now a AD9854 DDS). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a995d2ebe492ff95b2e5ca713d71ea3ea">SetPower</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, double Power)</para>

<para>Sets the power of a DDS (for now a AD9854 DDS). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1ae5b181a30828ff1db990df2100f38c56">SetAttenuation</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, double Attenuation)</para>

<para>Sets the attenuation of a DDS (for now a AD9854 DDS). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1ae932bdaf96d78340127ff60240a595e0">SetStartFrequencyTuningWord</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, uint64_t FrequencyTuningWord)</para>

<para>Sets the start frequency tuning word of a DDS (for now a AD9854 DDS). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a00b425d7071880267fffe6a58a0d64e4">SetStopFrequencyTuningWord</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, uint64_t FrequencyTuningWord)</para>

<para>Sets the stop frequency tuning word of a DDS (for now a AD9854 DDS). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a0efa8afc5430b7f6e777ff3a9cc74a1a">SetFSKMode</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, uint8_t mode)</para>

<para>Sets the FKS mode of a DDS (for now a AD9854 DDS). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a5757bdd84e00fbd3229f252fb4d84b82">SetRampRateClock</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, uint8_t rate)</para>

<para>Sets the ramp rate clock of a DDS (for now a AD9854 DDS). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1ac1542771adae2b534c5eb8bac19160e6">SetClearACC1</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, bool OnOff)</para>

<para>Clears the ACC1 bit of a DDS (for now a AD9854 DDS). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1ac2f32fe5d2acb13ca0a5c70099a18382">SetTriangleBit</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, bool OnOff)</para>

<para>Sets the triangle bit of a DDS (for now a AD9854 DDS). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a406078e2dbdff83bce00352ce7295308">SetFSKBit</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, bool OnOff)</para>

<para>Sets the FSK bit of a DDS (for now a AD9854 DDS). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1aa9a12a5ee9d3cf416b5fa5a3c3d62839">SetFrequency</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, double Frequency)</para>

<para>Sets the frequency of a DDS. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1ac09c6a84884d6a56eb93aad09a7f272a">SetFrequencyTuningWord</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, uint64_t FrequencyTuningWord)</para>

<para>Sets the frequency tuning word of a DDS. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a2f4fb297ff61349527cb71ddfa7b06eb">SetFrequencyOfChannel</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, uint8_t channel, double Frequency)</para>

<para>Sets the frequency of a multi channel DDS (for now the AD9958). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1aaf7bc23add42d0d456497d052dd98635">SetFrequencyTuningWordOfChannel</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, uint8_t channel, uint64_t FrequencyTuningWord)</para>

<para>Sets the frequency tuning word of a multi channel DDS (for now the AD9958). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1ac5867ffeebf13a6eda3d22d33e9dd40c">SetPhaseOfChannel</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, uint8_t channel, double Phase)</para>

<para>Sets the phase of a multi channel DDS (for now the AD9958). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a7a1ed99c5492fa69e87a5f7e64816307">SetPowerOfChannel</link> (const unsigned int &amp;Sequencer, const unsigned int &amp;Address, uint8_t channel, double Power)</para>

<para>Sets the phase of a multi channel DDS (for now the AD9958). </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> void <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a478fffdf8106582d696c10d2023b5898">ExecuteSequence</link> ()</para>

<para>Executes the sequence that was previously assembled. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a4157a77b339f2fb16d91ee4b419d0fb6">GetSequenceExecutionStatus</link> (bool &amp;running, unsigned long long &amp;DataPointsWritten)</para>

<para>Get the current status of the sequence execution. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a4b5993bcf640e03ace021ec5dfb6285c">WaitTillEndOfSequenceThenGetInputData</link> (uint8_t *&amp;buffer, unsigned long &amp;buffer_length, unsigned long &amp;EndTimeOfCycle, double timeout_in_s)</para>

<para>Waits until the sequence is finished, then gets the input data from the FPGA sequencer. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1aa0a620a75128414aa8099d943bd5d9d4">SetTimeDebtGuard_in_ms</link> (const double &amp;MaxTimeDebt_in_ms)</para>

<para>Sets a guard time. If sequencer commands make the time advance more than the guard time beyond what&apos;s allowed by Wait_ms, an error will be recorded (check with <link linkend="__control_a_p_i_8h_1a140351e5a8172134e8eff160d1b558e3">DidErrorOccur()</link> if that happened) or thrown. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a8180b4eff4abd9f3802a40744645f503">SequencerStartAnalogInAcquisition</link> (const unsigned int &amp;Sequencer, const uint8_t &amp;ChannelNumber, const uint32_t &amp;NumberOfDataPoints, const double &amp;DelayBetweenDataPoints_in_ms)</para>

<para>Start analog acquisition on the specified channel. This function places a commandto for the FPGA in the sequencer buffer. The analog in acquisition will start when this command is executed by the FPGA. Only one analog in acquisition can hapen at each moment. A new one can start right after the previous one is finished. The data will be returned at the end of a sequence when using CLA_WaitTillEndOfSequenceThenGetInputData. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1ac47ac7dbb536bdcfc283840b85510f3b">SequencerWriteInputMemory</link> (const unsigned int &amp;Sequencer, unsigned long input_buf_mem_data, bool write_next_address=1, unsigned long input_buf_mem_address=0)</para>

<para>Writes a value to the input memory of the sequencer. This is useful to mark the start or end of a data acquisition, or to mark the type of experimental run in the full fledged version of the ControlAPI, which can cycle sequences automatically in the background. To execute this function, a command for the FPGA must be placed in the sequencer buffer. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1af54b376ddf0332e9c7dbbe4e3fe606d7">SequencerWriteSystemTimeToInputMemory</link> (const unsigned int &amp;Sequencer)</para>

<para>Writes the current FPGA clock ticks to the input memory of the sequencer. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1aedd28ad11cec9bd57ba8962e8ebf2714">SequencerSwitchDebugLED</link> (const unsigned int &amp;Sequencer, unsigned int OnOff)</para>

<para>Switches the debug LED of the FPGA on or off. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a8ac5cffc47f6f36ee7f83f0f2d307175">SequencerIgnoreTCPIP</link> (const unsigned int &amp;Sequencer, bool OnOff)</para>

<para>Switches the sequencer to ignore TCP/IP commands. This is useful to prevent the sequencer from being interrupted by TCP/IP commands while executing a timing critical task, such as transferring input data from the FPGA BRAM to the DDR. This can be useful if lots of data is acquired at a high rate. Lot&apos;s of meaning: more than the size of the BRAM input buffer. How much that is depends how you configured the Vivado project that generates the FPGA sequencer firmware. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a98b5ba4b0487fb3d829d871534d8c9d4">SequencerAddMarker</link> (const unsigned int &amp;Sequencer, unsigned char marker)</para>

<para>Places a marker in the sequencer buffer. The FPGA SOM&apos;s CPU will see this marker and can react to it, e.g. write it to the USB-UART for debugging. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a7604d75152e18653c770cb8c19c56a5c">AddDeviceSequencer</link> (unsigned int id, const char *type, const char *ip, unsigned int port, bool master, unsigned int startDelay, double clockFrequency, unsigned long FPGAClockToBusClockRatio, bool useExternalClock, bool useStrobeGenerator, bool connect)</para>

<para>Add a device sequencer to the list. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a71a0d5c1b0de45c8b69527862e5835eb">AddDeviceAnalogOut16bit</link> (unsigned int sequencer, unsigned int startAddress, unsigned int numberChannels, bool signedValue, double minVoltage, double maxVoltage)</para>

<para>Add a 16 bit analog output device to the sequencer. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a3f0671a3b48f566b3c66e06cd0736af1">AddDeviceDigitalOut</link> (unsigned int sequencer, unsigned int address, unsigned int numberChannels)</para>

<para>Add a digital output device to the sequencer. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a73eb61a9f1e259fac768b58d589e3953">AddDeviceAD9854</link> (unsigned int sequencer, unsigned int address, unsigned int version, double externalClockFrequency, uint8_t PLLReferenceMultiplier, unsigned int frequencyMultiplier)</para>

<para>Add a AD9854 device to the sequencer. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a4563741200adaeb834ed18bfdba93770">AddDeviceAD9858</link> (unsigned int sequencer, unsigned int address, double externalClockFrequency, unsigned int frequencyMultiplier)</para>

<para>Add a AD9858 device to the sequencer. </para>
</listitem>
            <listitem><para><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> <link linkend="__control_a_p_i_8h_1a055304a3b5adbb19b63d6a22734a8f11">AddDeviceAnalogIn12bit</link> (unsigned int sequencer, unsigned int chipSelect, bool signedValue, double minVoltage, double maxVoltage)</para>

<para>Add a 12 bit analog input device to the sequencer. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>constexpr int <link linkend="__control_a_p_i_8h_1ab0e1cf239ac3e235992bc858f58e7ea9">MaxLastError</link> = 10</para>
</listitem>
            <listitem><para>std::string <link linkend="__control_a_p_i_8h_1a7d8ab587f73458e320154369f6a74c01">LastError</link> [<link linkend="__control_a_p_i_8h_1ab0e1cf239ac3e235992bc858f58e7ea9">MaxLastError</link>]</para>
</listitem>
            <listitem><para>int <link linkend="__control_a_p_i_8h_1aa8c7d164d3b3d02712b59520ac38b9e3">LastErrorIndex</link></para>
</listitem>
            <listitem><para>bool <link linkend="__control_a_p_i_8h_1a679deb1765f3544a100264eebb793da3">ErrorListWrapAround</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__control_a_p_i_8h_1a72cc69751765d28544d94e2a93da4412"/><section>
    <title>_AFXDLL</title>
<indexterm><primary>_AFXDLL</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>_AFXDLL</secondary></indexterm>
<para><computeroutput>#define _AFXDLL</computeroutput></para></section>
<anchor xml:id="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0"/><section>
    <title>API_EXPORT</title>
<indexterm><primary>API_EXPORT</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>API_EXPORT</secondary></indexterm>
<para><computeroutput>#define API_EXPORT</computeroutput></para></section>
<anchor xml:id="__control_a_p_i_8h_1a1c3cf2d9d1101f8bf1e704b2bae1455a"/><section>
    <title>API_EXPORT_CLASS<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>API_EXPORT_CLASS</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>API_EXPORT_CLASS</secondary></indexterm>
<para><computeroutput>#define API_EXPORT_CLASS</computeroutput></para></section>
<anchor xml:id="__control_a_p_i_8h_1a1c3cf2d9d1101f8bf1e704b2bae1455a"/><section>
    <title>API_EXPORT_CLASS<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>API_EXPORT_CLASS</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>API_EXPORT_CLASS</secondary></indexterm>
<para><computeroutput>#define API_EXPORT_CLASS</computeroutput></para></section>
<anchor xml:id="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38"/><section>
    <title>CLA_FN</title>
<indexterm><primary>CLA_FN</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>CLA_FN</secondary></indexterm>
<para><computeroutput>#define CLA_FN( name)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">CLA_##name
</programlisting></section>
<anchor xml:id="__control_a_p_i_8h_1ae89d33bd59c5669016e4694ae249bd0c"/><section>
    <title>CLA_FNDEF</title>
<indexterm><primary>CLA_FNDEF</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>CLA_FNDEF</secondary></indexterm>
<para><computeroutput>#define CLA_FNDEF( name)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">CLA_##name
</programlisting></section>
<anchor xml:id="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995"/><section>
    <title>ERROR_CODE_TYPE</title>
<indexterm><primary>ERROR_CODE_TYPE</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>ERROR_CODE_TYPE</secondary></indexterm>
<para><computeroutput>#define ERROR_CODE_TYPE&#160;&#160;&#160;bool</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__control_a_p_i_8h_1a73eb61a9f1e259fac768b58d589e3953"/><section>
    <title>AddDeviceAD9854()</title>
<indexterm><primary>AddDeviceAD9854</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>AddDeviceAD9854</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> AddDeviceAD9854 (unsigned int sequencer, unsigned int address, unsigned int version, double externalClockFrequency, uint8_t PLLReferenceMultiplier, unsigned int frequencyMultiplier)</computeroutput></para><para>

<para>Add a AD9854 device to the sequencer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>the address of the device to add. </para>
</entry>
                            </row>
                            <row>
<entry>version</entry><entry>
<para>the version of the device to add. </para>
</entry>
                            </row>
                            <row>
<entry>externalClockFrequency</entry><entry>
<para>the external clock frequency of the device to add. </para>
</entry>
                            </row>
                            <row>
<entry>PLLReferenceMultiplier</entry><entry>
<para>the PLL reference multiplier of the device to add. </para>
</entry>
                            </row>
                            <row>
<entry>frequencyMultiplier</entry><entry>
<para>the frequency multiplier of the device to add. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a4563741200adaeb834ed18bfdba93770"/><section>
    <title>AddDeviceAD9858()</title>
<indexterm><primary>AddDeviceAD9858</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>AddDeviceAD9858</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> AddDeviceAD9858 (unsigned int sequencer, unsigned int address, double externalClockFrequency, unsigned int frequencyMultiplier)</computeroutput></para><para>

<para>Add a AD9858 device to the sequencer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>the address of the device to add. </para>
</entry>
                            </row>
                            <row>
<entry>externalClockFrequency</entry><entry>
<para>the external clock frequency of the device to add. </para>
</entry>
                            </row>
                            <row>
<entry>frequencyMultiplier</entry><entry>
<para>the frequency multiplier of the device to add. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a055304a3b5adbb19b63d6a22734a8f11"/><section>
    <title>AddDeviceAnalogIn12bit()</title>
<indexterm><primary>AddDeviceAnalogIn12bit</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>AddDeviceAnalogIn12bit</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> AddDeviceAnalogIn12bit (unsigned int sequencer, unsigned int chipSelect, bool signedValue, double minVoltage, double maxVoltage)</computeroutput></para><para>

<para>Add a 12 bit analog input device to the sequencer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>chipSelect</entry><entry>
<para>the chip select of the device to add. </para>
</entry>
                            </row>
                            <row>
<entry>signedValue</entry><entry>
<para>true if the device is signed, false if it is unsigned. </para>
</entry>
                            </row>
                            <row>
<entry>minVoltage</entry><entry>
<para>the minimum voltage of the device to add. </para>
</entry>
                            </row>
                            <row>
<entry>maxVoltage</entry><entry>
<para>the maximum voltage of the device to add. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a71a0d5c1b0de45c8b69527862e5835eb"/><section>
    <title>AddDeviceAnalogOut16bit()</title>
<indexterm><primary>AddDeviceAnalogOut16bit</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>AddDeviceAnalogOut16bit</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> AddDeviceAnalogOut16bit (unsigned int sequencer, unsigned int startAddress, unsigned int numberChannels, bool signedValue, double minVoltage, double maxVoltage)</computeroutput></para><para>

<para>Add a 16 bit analog output device to the sequencer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>startAddress</entry><entry>
<para>the start address of the device to add. </para>
</entry>
                            </row>
                            <row>
<entry>numberChannels</entry><entry>
<para>the number of channels of the device to add. </para>
</entry>
                            </row>
                            <row>
<entry>signedValue</entry><entry>
<para>true if the device is signed, false if it is unsigned. </para>
</entry>
                            </row>
                            <row>
<entry>minVoltage</entry><entry>
<para>the minimum voltage of the device to add. </para>
</entry>
                            </row>
                            <row>
<entry>maxVoltage</entry><entry>
<para>the maximum voltage of the device to add. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a3f0671a3b48f566b3c66e06cd0736af1"/><section>
    <title>AddDeviceDigitalOut()</title>
<indexterm><primary>AddDeviceDigitalOut</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>AddDeviceDigitalOut</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> AddDeviceDigitalOut (unsigned int sequencer, unsigned int address, unsigned int numberChannels)</computeroutput></para><para>

<para>Add a digital output device to the sequencer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>address</entry><entry>
<para>the address of the device to add. </para>
</entry>
                            </row>
                            <row>
<entry>numberChannels</entry><entry>
<para>the number of channels of the device to add. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a7604d75152e18653c770cb8c19c56a5c"/><section>
    <title>AddDeviceSequencer()</title>
<indexterm><primary>AddDeviceSequencer</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>AddDeviceSequencer</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> AddDeviceSequencer (unsigned int id, const char * type, const char * ip, unsigned int port, bool master, unsigned int startDelay, double clockFrequency, unsigned long FPGAClockToBusClockRatio, bool useExternalClock, bool useStrobeGenerator, bool connect)</computeroutput></para><para>

<para>Add a device sequencer to the list. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>id</entry><entry>
<para>the id of the device sequencer to add (this is the number that all other commands are using when sending data to a device on this sequencer). </para>
</entry>
                            </row>
                            <row>
<entry>type</entry><entry>
<para>the type of the device sequencer to add. </para>
</entry>
                            </row>
                            <row>
<entry>ip</entry><entry>
<para>the ip address of the device sequencer to add. </para>
</entry>
                            </row>
                            <row>
<entry>port</entry><entry>
<para>the port of the device sequencer to add. </para>
</entry>
                            </row>
                            <row>
<entry>master</entry><entry>
<para>true if the device sequencer is a master, false if it is a slave. </para>
</entry>
                            </row>
                            <row>
<entry>startDelay</entry><entry>
<para>the start delay of the device sequencer to add. </para>
</entry>
                            </row>
                            <row>
<entry>clockFrequency</entry><entry>
<para>the clock frequency of the device sequencer to add. </para>
</entry>
                            </row>
                            <row>
<entry>FPGAClockToBusClockRatio</entry><entry>
<para>the FPGA clock to bus clock ratio of the device sequencer to add. </para>
</entry>
                            </row>
                            <row>
<entry>useExternalClock</entry><entry>
<para>true if the device sequencer should use an external clock, false if it should use the internal clock. </para>
</entry>
                            </row>
                            <row>
<entry>useStrobeGenerator</entry><entry>
<para>true if the device sequencer should use a strobe generator, false if it should not. </para>
</entry>
                            </row>
                            <row>
<entry>connect</entry><entry>
<para>true if the device sequencer should connect to the device, false if it should not. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1ab4216036d280f0e2357f4895feae00b3"/><section>
    <title>AddErrorMessage()</title>
<indexterm><primary>AddErrorMessage</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>AddErrorMessage</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> AddErrorMessage (const std::string &amp; error_message)</computeroutput></para></section>
<anchor xml:id="__control_a_p_i_8h_1a506a69f4a65cdc24f90c45593af69e14"/><section>
    <title>Cleanup()</title>
<indexterm><primary>Cleanup</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>Cleanup</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> void <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> Cleanup ( )</computeroutput></para><para>

<para>This function must be called when you are finished using the API. The class wrapped version of this API calls this function in its destructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>&lt;br&gt;</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a6d7a0dc42a60c601ca861bda69a816e6"/><section>
    <title>Configure()</title>
<indexterm><primary>Configure</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>Configure</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> void <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> Configure (bool _DisplayErrors)</computeroutput></para><para>

<para>Configures if the ControlAPI should display error messages. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>_DisplayErrors</entry><entry>
<para>true to display error messages, false to suppress them. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a8c0341f25801b401f242fef403355076"/><section>
    <title>Create()</title>
<indexterm><primary>Create</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>Create</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> Create (bool InitializeAfx, bool InitializeAfxSocket)</computeroutput></para><para>

<para>Initializes the ControlAPI. If you use a bare function C API, then this function must be called before using any other functions in the API. If you didn&apos;t load MFC yet (which is the case if you use Qt), then set. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>InitializeAfx</entry><entry>
<para>to true to initialize MFC core </para>
</entry>
                            </row>
                            <row>
<entry>InitializeAfxSocket</entry><entry>
<para>to true to initialize MFC socket layer The class wrapped version of this API calls this function in its constructor. </para>
</entry>
                            </row>
                            <row>
<entry>&lt;br&gt;</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a140351e5a8172134e8eff160d1b558e3"/><section>
    <title>DidErrorOccur()</title>
<indexterm><primary>DidErrorOccur</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>DidErrorOccur</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> bool <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> DidErrorOccur ( )</computeroutput></para><para>

<para>Check if an error has occurred since the last call to GetLastError. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>&lt;br&gt;</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if an error has occurred since the last call to GetLastError </para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a478fffdf8106582d696c10d2023b5898"/><section>
    <title>ExecuteSequence()</title>
<indexterm><primary>ExecuteSequence</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>ExecuteSequence</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> void <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> ExecuteSequence ( )</computeroutput></para><para>

<para>Executes the sequence that was previously assembled. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>&lt;br&gt;</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a0844f20c11e7006267c9d1f324aa0972"/><section>
    <title>GetLastError()</title>
<indexterm><primary>GetLastError</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>GetLastError</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> const char *<link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> GetLastError ( )</computeroutput></para><para>

<para>returns the last error messages </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>&lt;br&gt;</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a4157a77b339f2fb16d91ee4b419d0fb6"/><section>
    <title>GetSequenceExecutionStatus()</title>
<indexterm><primary>GetSequenceExecutionStatus</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>GetSequenceExecutionStatus</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> GetSequenceExecutionStatus (bool &amp; running, unsigned long long &amp; DataPointsWritten)</computeroutput></para><para>

<para>Get the current status of the sequence execution. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>running</entry><entry>
<para>returns true if the sequence is running, false if it is not. </para>
</entry>
                            </row>
                            <row>
<entry>DataPointsWritten</entry><entry>
<para>returns number of data points that were already written out by the FPGA sequencer(s). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a11d0b9d417e50889b6a266ef4747a523"/><section>
    <title>GetTime_ms()</title>
<indexterm><primary>GetTime_ms</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>GetTime_ms</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> GetTime_ms (double &amp; time_in_ms)</computeroutput></para><para>

<para>Get the current time in the currently assembled sequence ms. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>time_in_ms</entry><entry>
<para>the current time in ms. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a659cc537a03ff9e172efbfee6b8f29fe"/><section>
    <title>GetTimeDebtOfSequencer_ms()</title>
<indexterm><primary>GetTimeDebtOfSequencer_ms</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>GetTimeDebtOfSequencer_ms</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1ae89d33bd59c5669016e4694ae249bd0c">CLA_FNDEF</link> GetTimeDebtOfSequencer_ms (const unsigned int &amp; Sequencer, double &amp; time_debt_in_ms)</computeroutput></para><para>

<para>Get the time debtof a specific sequencer in the currently assembled sequence ms. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>time_debt_in_ms</entry><entry>
<para>the current time in ms. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a21be816bc7405b76d68549abf1837ebd"/><section>
    <title>GetTimeOfSequencer_ms()</title>
<indexterm><primary>GetTimeOfSequencer_ms</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>GetTimeOfSequencer_ms</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1ae89d33bd59c5669016e4694ae249bd0c">CLA_FNDEF</link> GetTimeOfSequencer_ms (const unsigned int &amp; Sequencer, double &amp; time_in_ms)</computeroutput></para><para>

<para>Get the current time of a specific sequencer in the currently assembled sequence ms. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>time_in_ms</entry><entry>
<para>the current time in ms. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a60e38637677508109aefb6af4780f92c"/><section>
    <title>Initialize()</title>
<indexterm><primary>Initialize</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>Initialize</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> Initialize ( )</computeroutput></para><para>

<para>After Configuring the hardware, e.g. by loading a json configuration file, this function must be called to initialize the hardware. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>&lt;br&gt;</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1aa882c8edaa867e2f92e6626956eb9569"/><section>
    <title>IsReady()</title>
<indexterm><primary>IsReady</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>IsReady</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> IsReady ( )</computeroutput></para><para>

<para>Checks if the ControlAPI is ready to be used. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>IsReady</entry><entry>
<para>true if the ControlAPI is ready to be used, false otherwise. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__control_a_p_i_8h_1ab07d444b997590d8bb7cbd82dd2036b9"/><section>
    <title>LoadFromJSONFile()</title>
<indexterm><primary>LoadFromJSONFile</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>LoadFromJSONFile</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> LoadFromJSONFile (const char * filename)</computeroutput></para><para>

<para>Loads a configuration from a JSON file. Before you can use the control system, you either must read a json configuration file, or define the devices in the API. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>filename</entry><entry>
<para>the name of the json file to load. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a98b5ba4b0487fb3d829d871534d8c9d4"/><section>
    <title>SequencerAddMarker()</title>
<indexterm><primary>SequencerAddMarker</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SequencerAddMarker</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SequencerAddMarker (const unsigned int &amp; Sequencer, unsigned char marker)</computeroutput></para><para>

<para>Places a marker in the sequencer buffer. The FPGA SOM&apos;s CPU will see this marker and can react to it, e.g. write it to the USB-UART for debugging. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>&lt;br&gt;</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a8ac5cffc47f6f36ee7f83f0f2d307175"/><section>
    <title>SequencerIgnoreTCPIP()</title>
<indexterm><primary>SequencerIgnoreTCPIP</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SequencerIgnoreTCPIP</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SequencerIgnoreTCPIP (const unsigned int &amp; Sequencer, bool OnOff)</computeroutput></para><para>

<para>Switches the sequencer to ignore TCP/IP commands. This is useful to prevent the sequencer from being interrupted by TCP/IP commands while executing a timing critical task, such as transferring input data from the FPGA BRAM to the DDR. This can be useful if lots of data is acquired at a high rate. Lot&apos;s of meaning: more than the size of the BRAM input buffer. How much that is depends how you configured the Vivado project that generates the FPGA sequencer firmware. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>&lt;br&gt;</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a8180b4eff4abd9f3802a40744645f503"/><section>
    <title>SequencerStartAnalogInAcquisition()</title>
<indexterm><primary>SequencerStartAnalogInAcquisition</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SequencerStartAnalogInAcquisition</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SequencerStartAnalogInAcquisition (const unsigned int &amp; Sequencer, const uint8_t &amp; ChannelNumber, const uint32_t &amp; NumberOfDataPoints, const double &amp; DelayBetweenDataPoints_in_ms)</computeroutput></para><para>

<para>Start analog acquisition on the specified channel. This function places a commandto for the FPGA in the sequencer buffer. The analog in acquisition will start when this command is executed by the FPGA. Only one analog in acquisition can hapen at each moment. A new one can start right after the previous one is finished. The data will be returned at the end of a sequence when using CLA_WaitTillEndOfSequenceThenGetInputData. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>ChannelNumber</entry><entry>
<para>the channel number to use. </para>
</entry>
                            </row>
                            <row>
<entry>NumberOfDataPoints</entry><entry>
<para>the number of data points to acquire. </para>
</entry>
                            </row>
                            <row>
<entry>DelayBetweenDataPoints_in_ms</entry><entry>
<para>the delay between data points in ms. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__control_a_p_i_8h_1aedd28ad11cec9bd57ba8962e8ebf2714"/><section>
    <title>SequencerSwitchDebugLED()</title>
<indexterm><primary>SequencerSwitchDebugLED</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SequencerSwitchDebugLED</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SequencerSwitchDebugLED (const unsigned int &amp; Sequencer, unsigned int OnOff)</computeroutput></para><para>

<para>Switches the debug LED of the FPGA on or off. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Squencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>OnOff</entry><entry>
<para>true to switch on the LED, false to switch it off. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1ac47ac7dbb536bdcfc283840b85510f3b"/><section>
    <title>SequencerWriteInputMemory()</title>
<indexterm><primary>SequencerWriteInputMemory</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SequencerWriteInputMemory</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SequencerWriteInputMemory (const unsigned int &amp; Sequencer, unsigned long input_buf_mem_data, bool write_next_address = <computeroutput>1</computeroutput>
, unsigned long input_buf_mem_address = <computeroutput>0</computeroutput>
)</computeroutput></para><para>

<para>Writes a value to the input memory of the sequencer. This is useful to mark the start or end of a data acquisition, or to mark the type of experimental run in the full fledged version of the ControlAPI, which can cycle sequences automatically in the background. To execute this function, a command for the FPGA must be placed in the sequencer buffer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>input_buf_mem_data</entry><entry>
<para>the data to write to the input memory. </para>
</entry>
                            </row>
                            <row>
<entry>write_next_address</entry><entry>
<para>true to write the next address, false to write the address given. </para>
</entry>
                            </row>
                            <row>
<entry>input_buf_mem_address</entry><entry>
<para>the address to write to, if write_next_address is false. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__control_a_p_i_8h_1af54b376ddf0332e9c7dbbe4e3fe606d7"/><section>
    <title>SequencerWriteSystemTimeToInputMemory()</title>
<indexterm><primary>SequencerWriteSystemTimeToInputMemory</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SequencerWriteSystemTimeToInputMemory</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SequencerWriteSystemTimeToInputMemory (const unsigned int &amp; Sequencer)</computeroutput></para><para>

<para>Writes the current FPGA clock ticks to the input memory of the sequencer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__control_a_p_i_8h_1ae5b181a30828ff1db990df2100f38c56"/><section>
    <title>SetAttenuation()</title>
<indexterm><primary>SetAttenuation</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetAttenuation</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetAttenuation (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, double Attenuation)</computeroutput></para><para>

<para>Sets the attenuation of a DDS (for now a AD9854 DDS). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the attenuation for. </para>
</entry>
                            </row>
                            <row>
<entry>Attenuation</entry><entry>
<para>the attenuation to set in dB (-xxx ... 0). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1ac1542771adae2b534c5eb8bac19160e6"/><section>
    <title>SetClearACC1()</title>
<indexterm><primary>SetClearACC1</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetClearACC1</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetClearACC1 (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, bool OnOff)</computeroutput></para><para>

<para>Clears the ACC1 bit of a DDS (for now a AD9854 DDS). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the ACC1 bit for. </para>
</entry>
                            </row>
                            <row>
<entry>OnOff</entry><entry>
<para>true to set the ACC1 bit, false to clear it. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a972d0eaa0ae7789d098a1aa41b6c0f3e"/><section>
    <title>SetDigitalOutput()</title>
<indexterm><primary>SetDigitalOutput</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetDigitalOutput</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetDigitalOutput (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, uint8_t BitNr, bool OnOff)</computeroutput></para><para>

<para>Sets a digital output to high or low. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the digital output for. </para>
</entry>
                            </row>
                            <row>
<entry>BitNr</entry><entry>
<para>the bit number of the digital output to set. </para>
</entry>
                            </row>
                            <row>
<entry>OnOff</entry><entry>
<para>true to set the output to high, false to set it to low. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__control_a_p_i_8h_1aa9a12a5ee9d3cf416b5fa5a3c3d62839"/><section>
    <title>SetFrequency()</title>
<indexterm><primary>SetFrequency</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetFrequency</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetFrequency (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, double Frequency)</computeroutput></para><para>

<para>Sets the frequency of a DDS. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the frequency for. </para>
</entry>
                            </row>
                            <row>
<entry>Frequency</entry><entry>
<para>the frequency to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a2f4fb297ff61349527cb71ddfa7b06eb"/><section>
    <title>SetFrequencyOfChannel()</title>
<indexterm><primary>SetFrequencyOfChannel</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetFrequencyOfChannel</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetFrequencyOfChannel (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, uint8_t channel, double Frequency)</computeroutput></para><para>

<para>Sets the frequency of a multi channel DDS (for now the AD9958). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the frequency for. </para>
</entry>
                            </row>
                            <row>
<entry>channel</entry><entry>
<para>the channel number to set the frequency for. </para>
</entry>
                            </row>
                            <row>
<entry>Frequency</entry><entry>
<para>the frequency to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1ac09c6a84884d6a56eb93aad09a7f272a"/><section>
    <title>SetFrequencyTuningWord()</title>
<indexterm><primary>SetFrequencyTuningWord</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetFrequencyTuningWord</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetFrequencyTuningWord (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, uint64_t FrequencyTuningWord)</computeroutput></para><para>

<para>Sets the frequency tuning word of a DDS. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the frequency tuning word for. </para>
</entry>
                            </row>
                            <row>
<entry>FrequencyTuningWord</entry><entry>
<para>the frequency tuning word to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1aaf7bc23add42d0d456497d052dd98635"/><section>
    <title>SetFrequencyTuningWordOfChannel()</title>
<indexterm><primary>SetFrequencyTuningWordOfChannel</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetFrequencyTuningWordOfChannel</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetFrequencyTuningWordOfChannel (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, uint8_t channel, uint64_t FrequencyTuningWord)</computeroutput></para><para>

<para>Sets the frequency tuning word of a multi channel DDS (for now the AD9958). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the frequency tuning word for. </para>
</entry>
                            </row>
                            <row>
<entry>channel</entry><entry>
<para>the channel number to set the frequency tuning word for. </para>
</entry>
                            </row>
                            <row>
<entry>FrequencyTuningWord</entry><entry>
<para>the frequency tuning word to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a406078e2dbdff83bce00352ce7295308"/><section>
    <title>SetFSKBit()</title>
<indexterm><primary>SetFSKBit</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetFSKBit</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetFSKBit (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, bool OnOff)</computeroutput></para><para>

<para>Sets the FSK bit of a DDS (for now a AD9854 DDS). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the FSK bit for. </para>
</entry>
                            </row>
                            <row>
<entry>OnOff</entry><entry>
<para>true to set the FSK bit, false to clear it. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a0efa8afc5430b7f6e777ff3a9cc74a1a"/><section>
    <title>SetFSKMode()</title>
<indexterm><primary>SetFSKMode</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetFSKMode</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetFSKMode (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, uint8_t mode)</computeroutput></para><para>

<para>Sets the FKS mode of a DDS (for now a AD9854 DDS). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the FKS mode for. </para>
</entry>
                            </row>
                            <row>
<entry>mode</entry><entry>
<para>the FKS mode to set (0..4). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a4a0a9d4c9b90bf999f291dccc7e97f6a"/><section>
    <title>SetModulationFrequency()</title>
<indexterm><primary>SetModulationFrequency</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetModulationFrequency</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetModulationFrequency (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, double Frequency)</computeroutput></para><para>

<para>Sets the modulation frequency of a DDS (for now a AD9854 DDS). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the modulation frequency for. </para>
</entry>
                            </row>
                            <row>
<entry>Frequency</entry><entry>
<para>the frequency to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1ac5867ffeebf13a6eda3d22d33e9dd40c"/><section>
    <title>SetPhaseOfChannel()</title>
<indexterm><primary>SetPhaseOfChannel</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetPhaseOfChannel</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetPhaseOfChannel (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, uint8_t channel, double Phase)</computeroutput></para><para>

<para>Sets the phase of a multi channel DDS (for now the AD9958). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the phase for. </para>
</entry>
                            </row>
                            <row>
<entry>channel</entry><entry>
<para>the channel number to set the phase for. </para>
</entry>
                            </row>
                            <row>
<entry>Phase</entry><entry>
<para>the phase to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a995d2ebe492ff95b2e5ca713d71ea3ea"/><section>
    <title>SetPower()</title>
<indexterm><primary>SetPower</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetPower</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetPower (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, double Power)</computeroutput></para><para>

<para>Sets the power of a DDS (for now a AD9854 DDS). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the power for. </para>
</entry>
                            </row>
                            <row>
<entry>Power</entry><entry>
<para>the power to set in % (0...100). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a7a1ed99c5492fa69e87a5f7e64816307"/><section>
    <title>SetPowerOfChannel()</title>
<indexterm><primary>SetPowerOfChannel</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetPowerOfChannel</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetPowerOfChannel (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, uint8_t channel, double Power)</computeroutput></para><para>

<para>Sets the phase of a multi channel DDS (for now the AD9958). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the phase for. </para>
</entry>
                            </row>
                            <row>
<entry>channel</entry><entry>
<para>the channel number to set the phase for. </para>
</entry>
                            </row>
                            <row>
<entry>Phase</entry><entry>
<para>the phase to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a5757bdd84e00fbd3229f252fb4d84b82"/><section>
    <title>SetRampRateClock()</title>
<indexterm><primary>SetRampRateClock</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetRampRateClock</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetRampRateClock (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, uint8_t rate)</computeroutput></para><para>

<para>Sets the ramp rate clock of a DDS (for now a AD9854 DDS). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the ramp rate clock for. </para>
</entry>
                            </row>
                            <row>
<entry>rate</entry><entry>
<para>the ramp rate clock to set (1...1048576). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1af357426cac3b146e775198deb3e7879f"/><section>
    <title>SetRegister()</title>
<indexterm><primary>SetRegister</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetRegister</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetRegister (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, const unsigned int &amp; SubAddress, const uint8_t * Data, const unsigned long &amp; DataLength_in_bit, const uint8_t &amp; StartBit = <computeroutput>0</computeroutput>
)</computeroutput></para><para>

<para>This function sets a register for a device on the sequencer. What this means depends on the device type. This function gives us an easy way to add new functionality to a device without having to programm new DLL functions. SetRegister maps to the register map given in the device&apos;s datasheet. Note: this is not currently implemented in the API. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the value for. </para>
</entry>
                            </row>
                            <row>
<entry>SubAddress</entry><entry>
<para>the subaddress of the device to set the value for. </para>
</entry>
                            </row>
                            <row>
<entry>Data</entry><entry>
<para>the data to set. </para>
</entry>
                            </row>
                            <row>
<entry>DataLength_in_bit</entry><entry>
<para>the length of the data in bits. </para>
</entry>
                            </row>
                            <row>
<entry>StartBit</entry><entry>
<para>the start bit of the data to set. </para>
</entry>
                            </row>
                            <row>
<entry>&lt;br&gt;</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1adaa14ea09a4c22a39531fc3fa21de7f7"/><section>
    <title>SetRegisterSerialDevice()</title>
<indexterm><primary>SetRegisterSerialDevice</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetRegisterSerialDevice</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetRegisterSerialDevice (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, const unsigned int &amp; SubAddress, const uint8_t * Data, const unsigned long &amp; DataLength_in_bit, const uint8_t &amp; StartBit = <computeroutput>0</computeroutput>
)</computeroutput></para><para>

<para>As SetRegister, but for serial devices. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the value for. </para>
</entry>
                            </row>
                            <row>
<entry>SubAddress</entry><entry>
<para>the subaddress of the device to set the value for. </para>
</entry>
                            </row>
                            <row>
<entry>Data</entry><entry>
<para>the data to set. </para>
</entry>
                            </row>
                            <row>
<entry>DataLength_in_bit</entry><entry>
<para>the length of the data in bits. </para>
</entry>
                            </row>
                            <row>
<entry>StartBit</entry><entry>
<para>the start bit of the data to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a704875336c6dfc8d3c1b1dc85f821461"/><section>
    <title>SetStartFrequency()</title>
<indexterm><primary>SetStartFrequency</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetStartFrequency</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetStartFrequency (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, double Frequency)</computeroutput></para><para>

<para>Sets the start frequency of a DDS (for now a AD9854 DDS). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the start frequency for. </para>
</entry>
                            </row>
                            <row>
<entry>Frequency</entry><entry>
<para>the frequency to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1ae932bdaf96d78340127ff60240a595e0"/><section>
    <title>SetStartFrequencyTuningWord()</title>
<indexterm><primary>SetStartFrequencyTuningWord</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetStartFrequencyTuningWord</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetStartFrequencyTuningWord (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, uint64_t FrequencyTuningWord)</computeroutput></para><para>

<para>Sets the start frequency tuning word of a DDS (for now a AD9854 DDS). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the start frequency tuning word for. </para>
</entry>
                            </row>
                            <row>
<entry>FrequencyTuningWord</entry><entry>
<para>the frequency tuning word to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a05b2d6a3d280298732b5e46c4ab34449"/><section>
    <title>SetStopFrequency()</title>
<indexterm><primary>SetStopFrequency</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetStopFrequency</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetStopFrequency (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, double Frequency)</computeroutput></para><para>

<para>Sets the stop frequency of a DDS (for now a AD9854 DDS). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the stop frequency for. </para>
</entry>
                            </row>
                            <row>
<entry>Frequency</entry><entry>
<para>the frequency to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a00b425d7071880267fffe6a58a0d64e4"/><section>
    <title>SetStopFrequencyTuningWord()</title>
<indexterm><primary>SetStopFrequencyTuningWord</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetStopFrequencyTuningWord</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetStopFrequencyTuningWord (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, uint64_t FrequencyTuningWord)</computeroutput></para><para>

<para>Sets the stop frequency tuning word of a DDS (for now a AD9854 DDS). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the stop frequency tuning word for. </para>
</entry>
                            </row>
                            <row>
<entry>FrequencyTuningWord</entry><entry>
<para>the frequency tuning word to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1aa0a620a75128414aa8099d943bd5d9d4"/><section>
    <title>SetTimeDebtGuard_in_ms()</title>
<indexterm><primary>SetTimeDebtGuard_in_ms</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetTimeDebtGuard_in_ms</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetTimeDebtGuard_in_ms (const double &amp; MaxTimeDebt_in_ms)</computeroutput></para><para>

<para>Sets a guard time. If sequencer commands make the time advance more than the guard time beyond what&apos;s allowed by Wait_ms, an error will be recorded (check with <link linkend="__control_a_p_i_8h_1a140351e5a8172134e8eff160d1b558e3">DidErrorOccur()</link> if that happened) or thrown. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>MaxTimeDebt_in_ms</entry><entry>
<para>maximum time debt in ms. If the sequencer commands make the time advance more than this, the sequencer will stop and wait for the next command. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1ac2f32fe5d2acb13ca0a5c70099a18382"/><section>
    <title>SetTriangleBit()</title>
<indexterm><primary>SetTriangleBit</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetTriangleBit</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetTriangleBit (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, bool OnOff)</computeroutput></para><para>

<para>Sets the triangle bit of a DDS (for now a AD9854 DDS). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the triangle bit for. </para>
</entry>
                            </row>
                            <row>
<entry>OnOff</entry><entry>
<para>true to set the triangle bit, false to clear it. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a262189e7099cc79d968f8ea9c66524e8"/><section>
    <title>SetValue()</title>
<indexterm><primary>SetValue</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetValue</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetValue (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, const unsigned int &amp; SubAddress, const uint8_t * Data, const unsigned long &amp; DataLength_in_bit, const uint8_t &amp; StartBit = <computeroutput>0</computeroutput>
)</computeroutput></para><para>

<para>This function sets a value for a device on the sequencer. What this means depends on the device type. This function gives us an easy way to add new functionality to a device without having to programm new DLL functions. In contrast to SetRegister, SetValue can execute more complex operations, such as calculating a DDS frequency tuning word from the given frequency and then programming that. There can be several SetValue functions for the same SetRegister function. There can be SetValue functions that set some parameter, or that trigger some action, not even necessarily related to the registers of the device. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the value for. </para>
</entry>
                            </row>
                            <row>
<entry>SubAddress</entry><entry>
<para>the subaddress of the device to set the value for. </para>
</entry>
                            </row>
                            <row>
<entry>Data</entry><entry>
<para>the data to set. </para>
</entry>
                            </row>
                            <row>
<entry>DataLength_in_bit</entry><entry>
<para>the length of the data in bits. </para>
</entry>
                            </row>
                            <row>
<entry>StartBit</entry><entry>
<para>the start bit of the data to set. </para>
</entry>
                            </row>
                            <row>
<entry>&lt;br&gt;</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1abf975f1bca00f331a47c6c49154b3349"/><section>
    <title>SetValueSerialDevice()</title>
<indexterm><primary>SetValueSerialDevice</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetValueSerialDevice</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetValueSerialDevice (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, const unsigned int &amp; SubAddress, const uint8_t * Data, const unsigned long &amp; DataLength_in_bit, const uint8_t &amp; StartBit = <computeroutput>0</computeroutput>
)</computeroutput></para><para>

<para>As SetValue, but for serial devices. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the value for. </para>
</entry>
                            </row>
                            <row>
<entry>SubAddress</entry><entry>
<para>the subaddress of the device to set the value for. </para>
</entry>
                            </row>
                            <row>
<entry>Data</entry><entry>
<para>the data to set. </para>
</entry>
                            </row>
                            <row>
<entry>DataLength_in_bit</entry><entry>
<para>the length of the data in bits. </para>
</entry>
                            </row>
                            <row>
<entry>StartBit</entry><entry>
<para>the start bit of the data to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1afb0d59c570ca8cc10b8a6e6b0f36afb7"/><section>
    <title>SetVoltage()</title>
<indexterm><primary>SetVoltage</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SetVoltage</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SetVoltage (const unsigned int &amp; Sequencer, const unsigned int &amp; Address, double Voltage)</computeroutput></para><para>

<para>Sets the voltage of an analog output device. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Sequencer</entry><entry>
<para>the sequencer to use. </para>
</entry>
                            </row>
                            <row>
<entry>Address</entry><entry>
<para>the address of the device to set the voltage for. </para>
</entry>
                            </row>
                            <row>
<entry>Voltage</entry><entry>
<para>the voltage to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a5b051278563acf5ea4fa65465679b785"/><section>
    <title>StartAssemblingSequence()</title>
<indexterm><primary>StartAssemblingSequence</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>StartAssemblingSequence</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> void <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> StartAssemblingSequence ( )</computeroutput></para><para>

<para>Starts assembling a sequence. Clears any previous sequence. Must be called before adding commands to the sequence. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>&lt;br&gt;</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a7ea429f67ff65d764dfe65e89db76f76"/><section>
    <title>SwitchDebugMode()</title>
<indexterm><primary>SwitchDebugMode</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>SwitchDebugMode</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> void <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> SwitchDebugMode (bool OnOff, const char * FileName)</computeroutput></para><para>

<para>Switches Debug mode on. In Debug mode, the sequence of each FPGA sequencer is written to a human readable ASCII file before being sent to the FPGA. In addition, the FPGA sequencers display more information on their USB-UART port, being slowed down a bit by that. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>OnOff</entry><entry>
<para>true to switch on debug mode, false to switch it off. </para>
</entry>
                            </row>
                            <row>
<entry>FileName</entry><entry>
<para>the name of the file to write the debug information to without filename extension. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a525a56e7c7e0b7db2190a537777d75b9"/><section>
    <title>Wait_ms()</title>
<indexterm><primary>Wait_ms</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>Wait_ms</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> Wait_ms (double time_in_ms)</computeroutput></para><para>

<para>Wait for a given time in ms. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>time_in_ms</entry><entry>
<para>the time to wait in ms. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para></para>
</formalpara>
</para>
</section>
<anchor xml:id="__control_a_p_i_8h_1a4b5993bcf640e03ace021ec5dfb6285c"/><section>
    <title>WaitTillEndOfSequenceThenGetInputData()</title>
<indexterm><primary>WaitTillEndOfSequenceThenGetInputData</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>WaitTillEndOfSequenceThenGetInputData</secondary></indexterm>
<para><computeroutput><link linkend="__control_a_p_i_8h_1a5e3652cae8b48c1ad174f0b06bbd06d0">API_EXPORT</link> <link linkend="__control_a_p_i_8h_1aeb04e3165c1e12a3653ac311ee466995">ERROR_CODE_TYPE</link> <link linkend="__control_a_p_i_8h_1a508a3fd47b47db49be429d0149e6df38">CLA_FN</link> WaitTillEndOfSequenceThenGetInputData (uint8_t *&amp; buffer, unsigned long &amp; buffer_length, unsigned long &amp; EndTimeOfCycle, double timeout_in_s)</computeroutput></para><para>

<para>Waits until the sequence is finished, then gets the input data from the FPGA sequencer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>buffer</entry><entry>
<para>pointer to the input data buffer. Don&apos;t delete this buffer, it is managed by the API. </para>
</entry>
                            </row>
                            <row>
<entry>buffer_length</entry><entry>
<para>length of the input data buffer in bytes. </para>
</entry>
                            </row>
                            <row>
<entry>EndTimeOfCycle</entry><entry>
<para>returns the end time of the cycle in ms. </para>
</entry>
                            </row>
                            <row>
<entry>timeout_in_s</entry><entry>
<para>timeout in seconds. If the sequence is not finished within this time, the function returns false or throws an exception (depending on mode selected mode when compiling API). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="__control_a_p_i_8h_1a679deb1765f3544a100264eebb793da3"/><section>
    <title>ErrorListWrapAround</title>
<indexterm><primary>ErrorListWrapAround</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>ErrorListWrapAround</secondary></indexterm>
<para><computeroutput>bool ErrorListWrapAround<computeroutput>[extern]</computeroutput></computeroutput></para></section>
<anchor xml:id="__control_a_p_i_8h_1a7d8ab587f73458e320154369f6a74c01"/><section>
    <title>LastError</title>
<indexterm><primary>LastError</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>LastError</secondary></indexterm>
<para><computeroutput>std::string LastError[<link linkend="__control_a_p_i_8h_1ab0e1cf239ac3e235992bc858f58e7ea9">MaxLastError</link>]<computeroutput>[extern]</computeroutput></computeroutput></para></section>
<anchor xml:id="__control_a_p_i_8h_1aa8c7d164d3b3d02712b59520ac38b9e3"/><section>
    <title>LastErrorIndex</title>
<indexterm><primary>LastErrorIndex</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>LastErrorIndex</secondary></indexterm>
<para><computeroutput>int LastErrorIndex<computeroutput>[extern]</computeroutput></computeroutput></para></section>
<anchor xml:id="__control_a_p_i_8h_1ab0e1cf239ac3e235992bc858f58e7ea9"/><section>
    <title>MaxLastError</title>
<indexterm><primary>MaxLastError</primary><secondary>ControlAPI.h</secondary></indexterm>
<indexterm><primary>ControlAPI.h</primary><secondary>MaxLastError</secondary></indexterm>
<para><computeroutput>int MaxLastError = 10<computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
</section>
</section>
